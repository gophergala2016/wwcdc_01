package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// FindReviewsForLearningResourceHandlerFunc turns a function with the right signature into a find reviews for learning resource handler
type FindReviewsForLearningResourceHandlerFunc func(FindReviewsForLearningResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindReviewsForLearningResourceHandlerFunc) Handle(params FindReviewsForLearningResourceParams) middleware.Responder {
	return fn(params)
}

// FindReviewsForLearningResourceHandler interface for that can handle valid find reviews for learning resource params
type FindReviewsForLearningResourceHandler interface {
	Handle(FindReviewsForLearningResourceParams) middleware.Responder
}

// NewFindReviewsForLearningResource creates a new http.Handler for the find reviews for learning resource operation
func NewFindReviewsForLearningResource(ctx *middleware.Context, handler FindReviewsForLearningResourceHandler) *FindReviewsForLearningResource {
	return &FindReviewsForLearningResource{Context: ctx, Handler: handler}
}

/*FindReviewsForLearningResource swagger:route GET /learning-resources/{id}/reviews findReviewsForLearningResource

Returns a learning resource based on a single ID, if the user has access to the learning resource

*/
type FindReviewsForLearningResource struct {
	Context *middleware.Context
	Params  FindReviewsForLearningResourceParams
	Handler FindReviewsForLearningResourceHandler
}

func (o *FindReviewsForLearningResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewFindReviewsForLearningResourceParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
