package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/freeeve/gophergala/models"
)

/*DeleteLearningResourceNoContent learning resource deleted

swagger:response deleteLearningResourceNoContent
*/
type DeleteLearningResourceNoContent struct {
}

// NewDeleteLearningResourceNoContent creates DeleteLearningResourceNoContent with default headers values
func NewDeleteLearningResourceNoContent() *DeleteLearningResourceNoContent {
	return &DeleteLearningResourceNoContent{}
}

// WriteResponse to the client
func (o *DeleteLearningResourceNoContent) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(204)
}

/*DeleteLearningResourceDefault unexpected error

swagger:response deleteLearningResourceDefault
*/
type DeleteLearningResourceDefault struct {
	_statusCode int

	// In: body
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewDeleteLearningResourceDefault creates DeleteLearningResourceDefault with default headers values
func NewDeleteLearningResourceDefault(code int) *DeleteLearningResourceDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteLearningResourceDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete learning resource default response
func (o *DeleteLearningResourceDefault) WithStatusCode(code int) *DeleteLearningResourceDefault {
	o._statusCode = code
	return o
}

// WithPayload adds the payload to the delete learning resource default response
func (o *DeleteLearningResourceDefault) WithPayload(payload *models.ErrorModel) *DeleteLearningResourceDefault {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *DeleteLearningResourceDefault) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
