package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/gophergala2016/wwcdc_01/models"
)

/*FindReviewsOK reviews response

swagger:response findReviewsOK
*/
type FindReviewsOK struct {

	// In: body
	Payload []*models.Review `json:"body,omitempty"`
}

// NewFindReviewsOK creates FindReviewsOK with default headers values
func NewFindReviewsOK() *FindReviewsOK {
	return &FindReviewsOK{}
}

// WithPayload adds the payload to the find reviews o k response
func (o *FindReviewsOK) WithPayload(payload []*models.Review) *FindReviewsOK {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *FindReviewsOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*FindReviewsDefault unexpected error

swagger:response findReviewsDefault
*/
type FindReviewsDefault struct {
	_statusCode int

	// In: body
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewFindReviewsDefault creates FindReviewsDefault with default headers values
func NewFindReviewsDefault(code int) *FindReviewsDefault {
	if code <= 0 {
		code = 500
	}

	return &FindReviewsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the find reviews default response
func (o *FindReviewsDefault) WithStatusCode(code int) *FindReviewsDefault {
	o._statusCode = code
	return o
}

// WithPayload adds the payload to the find reviews default response
func (o *FindReviewsDefault) WithPayload(payload *models.ErrorModel) *FindReviewsDefault {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *FindReviewsDefault) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
