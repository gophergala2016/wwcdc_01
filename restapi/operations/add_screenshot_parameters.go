package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewAddScreenshotParams creates a new AddScreenshotParams object
// with the default values initialized.
func NewAddScreenshotParams() AddScreenshotParams {
	var ()
	return AddScreenshotParams{}
}

// AddScreenshotParams contains all the bound params for the add screenshot operation
// typically these are obtained from a http.Request
//
// swagger:parameters addScreenshot
type AddScreenshotParams struct {
	/*id of the learning resource
	  Required: true
	  In: path
	*/
	ID int64
	/*screenshot image for the learning resource specified
	  Required: true
	  In: formData
	*/
	Screenshot httpkit.File
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *AddScreenshotParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		return err
	}
	fds := httpkit.Values(r.Form)

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	screenshot, screenshotHeader, err := r.FormFile("screenshot")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "screenshot", err))
	} else {
		o.Screenshot = httpkit.File{Data: screenshot, Header: screenshotHeader}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddScreenshotParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	return nil
}
