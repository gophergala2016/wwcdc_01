package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewFindLearningResourcesParams creates a new FindLearningResourcesParams object
// with the default values initialized.
func NewFindLearningResourcesParams() FindLearningResourcesParams {
	var ()
	return FindLearningResourcesParams{}
}

// FindLearningResourcesParams contains all the bound params for the find learning resources operation
// typically these are obtained from a http.Request
//
// swagger:parameters findLearningResources
type FindLearningResourcesParams struct {
	/*learning resource types to filter by, eg. 'online', 'other'
	  In: query
	  Collection Format: csv
	*/
	Types []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *FindLearningResourcesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	qs := httpkit.Values(r.URL.Query())

	qTypes, qhkTypes, _ := qs.GetOK("types")
	if err := o.bindTypes(qTypes, qhkTypes, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindLearningResourcesParams) bindTypes(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvTypes string
	if len(rawData) > 0 {
		qvTypes = rawData[len(rawData)-1]
	}

	raw := swag.SplitByFormat(qvTypes, "csv")
	size := len(raw)

	if size == 0 {
		return nil
	}

	ic := raw
	isz := size
	var ir []string
	iValidateElement := func(i int, typesI string) *errors.Validation {

		return nil
	}

	for i := 0; i < isz; i++ {

		if err := iValidateElement(i, ic[i]); err != nil {
			return err
		}
		ir = append(ir, ic[i])
	}

	o.Types = ir

	return nil
}
