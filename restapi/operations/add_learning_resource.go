package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// AddLearningResourceHandlerFunc turns a function with the right signature into a add learning resource handler
type AddLearningResourceHandlerFunc func(AddLearningResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddLearningResourceHandlerFunc) Handle(params AddLearningResourceParams) middleware.Responder {
	return fn(params)
}

// AddLearningResourceHandler interface for that can handle valid add learning resource params
type AddLearningResourceHandler interface {
	Handle(AddLearningResourceParams) middleware.Responder
}

// NewAddLearningResource creates a new http.Handler for the add learning resource operation
func NewAddLearningResource(ctx *middleware.Context, handler AddLearningResourceHandler) *AddLearningResource {
	return &AddLearningResource{Context: ctx, Handler: handler}
}

/*AddLearningResource swagger:route POST /learning-resources addLearningResource

Creates a new learning resource.

*/
type AddLearningResource struct {
	Context *middleware.Context
	Params  AddLearningResourceParams
	Handler AddLearningResourceHandler
}

func (o *AddLearningResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewAddLearningResourceParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
