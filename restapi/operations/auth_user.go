package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// AuthUserHandlerFunc turns a function with the right signature into a auth user handler
type AuthUserHandlerFunc func(AuthUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthUserHandlerFunc) Handle(params AuthUserParams) middleware.Responder {
	return fn(params)
}

// AuthUserHandler interface for that can handle valid auth user params
type AuthUserHandler interface {
	Handle(AuthUserParams) middleware.Responder
}

// NewAuthUser creates a new http.Handler for the auth user operation
func NewAuthUser(ctx *middleware.Context, handler AuthUserHandler) *AuthUser {
	return &AuthUser{Context: ctx, Handler: handler}
}

/*AuthUser swagger:route POST /user-auth authUser

Authenticates a user.

*/
type AuthUser struct {
	Context *middleware.Context
	Params  AuthUserParams
	Handler AuthUserHandler
}

func (o *AuthUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewAuthUserParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
