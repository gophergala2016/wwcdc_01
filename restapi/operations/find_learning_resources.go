package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// FindLearningResourcesHandlerFunc turns a function with the right signature into a find learning resources handler
type FindLearningResourcesHandlerFunc func(FindLearningResourcesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindLearningResourcesHandlerFunc) Handle(params FindLearningResourcesParams) middleware.Responder {
	return fn(params)
}

// FindLearningResourcesHandler interface for that can handle valid find learning resources params
type FindLearningResourcesHandler interface {
	Handle(FindLearningResourcesParams) middleware.Responder
}

// NewFindLearningResources creates a new http.Handler for the find learning resources operation
func NewFindLearningResources(ctx *middleware.Context, handler FindLearningResourcesHandler) *FindLearningResources {
	return &FindLearningResources{Context: ctx, Handler: handler}
}

/*FindLearningResources swagger:route GET /learning-resources findLearningResources

Returns all learning resources

*/
type FindLearningResources struct {
	Context *middleware.Context
	Params  FindLearningResourcesParams
	Handler FindLearningResourcesHandler
}

func (o *FindLearningResources) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewFindLearningResourcesParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
