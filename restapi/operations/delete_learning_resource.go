package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// DeleteLearningResourceHandlerFunc turns a function with the right signature into a delete learning resource handler
type DeleteLearningResourceHandlerFunc func(DeleteLearningResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteLearningResourceHandlerFunc) Handle(params DeleteLearningResourceParams) middleware.Responder {
	return fn(params)
}

// DeleteLearningResourceHandler interface for that can handle valid delete learning resource params
type DeleteLearningResourceHandler interface {
	Handle(DeleteLearningResourceParams) middleware.Responder
}

// NewDeleteLearningResource creates a new http.Handler for the delete learning resource operation
func NewDeleteLearningResource(ctx *middleware.Context, handler DeleteLearningResourceHandler) *DeleteLearningResource {
	return &DeleteLearningResource{Context: ctx, Handler: handler}
}

/*DeleteLearningResource swagger:route DELETE /learning-resources/{id} deleteLearningResource

deletes a single learning resource based on the ID supplied

*/
type DeleteLearningResource struct {
	Context *middleware.Context
	Params  DeleteLearningResourceParams
	Handler DeleteLearningResourceHandler
}

func (o *DeleteLearningResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewDeleteLearningResourceParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
