package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*Review Review review

swagger:model Review
*/
type Review struct {

	/* Cost cost
	 */
	Cost int64 `json:"cost,omitempty"`

	/* CourseInteraction course interaction
	 */
	CourseInteraction int64 `json:"course_interaction,omitempty"`

	/* CourseLength course length
	 */
	CourseLength int64 `json:"course_length,omitempty"`

	/* CourseSize course size
	 */
	CourseSize int64 `json:"course_size,omitempty"`

	/* Description description

	Required: true
	*/
	Description string `json:"description,omitempty"`

	/* Finished finished
	 */
	Finished *bool `json:"finished,omitempty"`

	/* ID id

	Required: true
	Read Only: true
	*/
	ID int64 `json:"id,omitempty"`

	/* LearningResourceID learning resource id

	Required: true
	*/
	LearningResourceID int64 `json:"learning_resource_id,omitempty"`

	/* Usefulness usefulness

	Required: true
	*/
	Usefulness int64 `json:"usefulness,omitempty"`

	/* UserID user id

	Required: true
	*/
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this review
func (m *Review) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLearningResourceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsefulness(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Review) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *Review) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Review) validateLearningResourceID(formats strfmt.Registry) error {

	if err := validate.Required("learning_resource_id", "body", int64(m.LearningResourceID)); err != nil {
		return err
	}

	return nil
}

func (m *Review) validateUsefulness(formats strfmt.Registry) error {

	if err := validate.Required("usefulness", "body", int64(m.Usefulness)); err != nil {
		return err
	}

	return nil
}

func (m *Review) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", int64(m.UserID)); err != nil {
		return err
	}

	return nil
}
