{
  "name": "miner",
  "description": "Localhost tunelling service wrappers",
  "version": "0.2.1",
  "homepage": "http://daffl.github.com/miner",
  "author": {
    "name": "David Luecke",
    "email": "daff@neyeon.com",
    "url": "http://daffl.github.com"
  },
  "main": "lib/miner.js",
  "engines": {
    "node": "~0.10"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/daffl/miner.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "browserstack": "~0.2.0",
    "connect": "~2.8.4",
    "grunt": "^0.4.4",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-release": "^0.7.0",
    "grunt-simple-mocha": "^0.4.0",
    "mocha": ">= 1.4.0",
    "request": "~2.22.0"
  },
  "dependencies": {
    "browserstacktunnel-wrapper": "^1.2.1",
    "localtunnel": "^1.2.0"
  },
  "readme": "# Miner\n\n[![Build Status](https://travis-ci.org/daffl/miner.png?branch=master)](https://travis-ci.org/daffl/miner)\n\nMiner wraps localhost tunelling services to easily expose your Node server to the web. As always installation is as easy as\n\n> npm install miner\n\nThe Miner service interface looks like this:\n\n```js\nvar miner = require('miner');\nminer.<servicename>(configuration, function(error, url, process) {\n  error // -> An Error instance on errors\n  url // -> The tunnel URL\n  process // -> The ChildProcess object if applicable\n});\n```\n\nSee the [ChildProcess documentation](http://nodejs.org/api/child_process.html#child_process_class_childprocess)\nfor more information about the `process` object.\n\n## Quick Start\n\nLets create the basic NodeJS HTTP server example and make it available to the web via\n[Localtunnel](http://progrium.com/localtunnel/):\n\n```js\nvar http = require('http');\nvar miner = require('miner');\nvar port = 1337;\n\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n');\n}).listen(port, '127.0.0.1');\nconsole.log('Server running at http://127.0.0.1:1337/');\n\nminer.localtunnel({\n  port: port\n}, function(error, url, process) {\n  if(error) {\n    console.log('ERROR', error);\n    return;\n  }\n  console.log('Your server is now available to the world at:');\n  console.log(url);\n});\n```\n\nJust visit the url to see the server output.\n\n## Tunneling services\n\n### Default tunnel\n\nThe default tunnel is a dummy tunelling service that returns the URL for a given hostname and port. That way you\ncan use the miner interface even when just connecting to a local server.\n\n* `port` - The port to share (default: none `80`)\n* `hostname` - The hostname to use (default: `localhost`)\n* `useOsHostname` - Use the system hostname if set to `true` and `hostname` is not set\n\n```js\nvar miner = require('miner');\nminer.local({\n  port : 8080\n}, function(error, url) {\n  url // -> http://localhost:8080\n});\n```\n\n### Localtunnel\n\n[Localtunnel](http://localtunnel.me) allows you to easily share a web service on your local development machine without messing with DNS and firewall settings. The following options are available:\n\n* `subdomain` A *string* value requesting a specific subdomain on the proxy server. **Note** You may not actually receive this name depending on availablily.\n* `local_host` Proxy to this hostname instead of `localhost`. This will also cause the `Host` header to be re-written to this value in proxied requests.\n\n```js\nvar miner = require('miner');\nminer.localtunnel({\n  port : 8080\n}, function(error, url, tunnel) {\n  tunnel.close();\n});\n```\n\nThe `tunnel` instance returned to your callback emits the following events\n\n|event|args|description|\n|----|----|----|\n|error|err|fires when an error happens on the tunnel|\n|close||fires when the tunnel has closed|\n\nThe `tunnel instance has the following methods\n\n|method|args|description|\n|----|----|----|\n|close||close the tunnel|\n\n\n### Browserstack\n\n[BrowserStack](http://browserstack.com) is a cross browser testing tool. You need a Browserstack account with API access and have to provide your [private key](http://www.browserstack.com/local-testing#cmd-tunnel) to the miner service. Unlike other\nservices it will not provide a publicly acessible URL but the given URL will be accessible on your BrowserStack\n instances. The configuration is almost identical with the [BrowserStackTunnel](https://github.com/pghalliday/node-BrowserStackTunnel) module which is used internally, additionally you can pass simply a port to tunnel.\n\n* `key` - Your browserstack command line tunnel key\n* `hosts` - An array of hosts to tunnel\n* `port` - The port to share (default: `80`)\n* `osxBin` - optionally override the default bin directory for the OSX binary\n* `linux32Bin` - optionally override the default bin directory for the Linux 32 bit binary\n* `linux64Bin` - optionally override the default bin directory for the Linux 64 bit binary\n* `jarFile` - on other platforms, optionally override the default path to the BrowserStackTunnel.jar file\n* `tunnelIdentifier` - optionally set the -tunnelIdentifier option\n* `skipCheck` - optionally set the -skipCheck option\n* `vtrue, optionally set the -v (verbose) option\n* `proxyUser` - optionally set the proxy user\n* `proxyPass` - optionally set the proxy password\n* `proxyPort` - optionally set the proxy port\n* `proxyHost` - optionally set the proxy host\n\n```js\nvar miner = require('miner');\nminer.browserstack({\n  port : 8080,\n  key: '<your API key>'\n}, function(error, url, tunnel) {\n  tunnel.kill();\n});\n```\n\n\n### Pagekite\n\n[Pagekite](https://pagekite.net/) is a reliable way to make localhost part of the Web.\nSign up for the free one month trial [here](https://pagekite.net/signup/).\nTo use the wrapper Pagekite needs to be installed and initialized with your user information.\nAfter that it can be initializedwith these optiosn:\n\n* `name` - Your pagekite username\n* `domain` - Your pagekite domain (default: `.pagekite.me`)\n* `port` - The port to share (default: `80`)\n* `timeout` - The timeout (in *ms*) after which the process will be killed if\nit hasn't reported back a valid URL (default: `30000`)\n* `executable` - The pagekite executable (default: `pagekite.py`)\n\n```js\nvar miner = require('miner');\nminer.pagekite({\n  name : 'myname',\n  port : 8080\n}, function(error, url, tunnel) {\n  tunnel.kill();\n});\n```\n\n\n## Changelog\n\n__0.2.0__\n\n- Removed old localtunnel and moved to [localtunnel.me](http://localtunnel.me)\n- Moved to using [Node Browserstack tunnel](https://github.com/pghalliday/node-BrowserStackTunnel) module\n- Better tests, runs Browserstack tests in Travis\n- Added JSHint and Grunt build\n\n__0.1.0__\n\n- Initial release\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/daffl/miner/issues"
  },
  "_id": "miner@0.2.1",
  "_shasum": "b3224148f97b65ae4296b5054984f2276056b124",
  "_resolved": "https://registry.npmjs.org/miner/-/miner-0.2.1.tgz",
  "_from": "miner@>=0.2.1 <0.3.0"
}
