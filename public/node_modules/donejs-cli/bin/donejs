#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var program = require('commander');
var mkdirp = require('mkdirp');
var debug = require('debug')('donejs-cli:binary');
var isWindows = require('os').platform() === 'win32';

var utils = require('../lib/utils');
var log = utils.log;

var mypkg = require(path.join(__dirname, '..', 'package.json'));

var commandList = ['init', 'generate'];
var initDescription = 'Initialize a new DoneJS application in a new folder or the current one';

program.version(mypkg.version)
  .description('The DoneJS command line utility lets you run generators, NPM scripts and binaries local to your project.');

debug('Loading CLI, version is', mypkg.version);

utils.projectRoot().then(function (root) {
  debug('Found project root', root);
  var actions = {
    init: function (folder, options) {
      debug('Initializing new application', folder);
      if (folder) {
        var appDir = path.join(process.cwd(), folder);
        if (fs.existsSync(appDir)) {
          console.error('Folder `' + folder + '` already exists.');
          return;
        }

        console.log('Creating folder ' + folder);
        mkdirp.sync(appDir);
        process.chdir(appDir);
      }

      var nodeModules = path.join(process.cwd(), 'node_modules');

      if(!fs.existsSync(nodeModules)) {
        nodeModules = path.join(root, 'node_modules');
      }

      debug('Generating application in folder', process.cwd());

      var generatePromise = utils.generate(nodeModules, 'generator-donejs', ['app', {
          version: mypkg.version,
          packages: mypkg.donejs,
          skipInstall: options.skipInstall
        }
      ]);
      log(generatePromise);
    },
    generate: function (type, options) {
      debug('Generating', 'generator-donejs', type, options);
      log(utils.generate(path.join(root, 'node_modules'), 'generator-donejs', [[type].concat(options)]));
    },
    catchAll: function (command) {
      console.error('Could not run `' + command + '`');
      program.help();
    },
    add: function(name, params) {
      var generators = require(path.join(root, 'node_modules', 'generator-donejs'));
      if(generators[name]) {
        debug('add called but running generate instead', name, params);
        return actions.generate(name, params);
      }

      debug('add', name, params);
      log(utils.add(path.join(root, 'node_modules'), name, params));
    }
  };
  // Lists all NPM scripts of the package.json in the current folder
  var curpkg = {};
  try {
    curpkg = require(path.join(root, 'package.json'));
  } catch (e) {
    // otherwise no local package.json
    debug('Could not load local package.json');
  }

  // donejs init
  program.command('init [folder]')
    .option('-S, --skip-install')
    .description(initDescription)
    .action(actions.init);

  // donejs generate
  program.command('generate <name> [options...]')
    .description('Run a generator.')
    .action(actions.generate);

  // catchall
  program.command('*')
    .description('')
    .action(actions.catchAll);

  program.command('add <name> [params...]')
    .description('Add functionality to your project')
    .action(actions.add);

  Object.keys(curpkg.scripts || {}).forEach(function (script) {
    if (commandList.indexOf(script) === -1) {
      commandList.push(script);
      program.command(script + ' [...args]')
        .description('`' + curpkg.scripts[script] + '` (package.json)')
        .action(function (args) {
          debug('Running script', script, args);
          log(utils.runScript(script, args));
        });
    }
  });

  // List all other local binaries
  var binPath = path.join(path.join(root, "node_modules"), '.bin');
  if (fs.existsSync(binPath)) {
    fs.readdirSync(binPath).forEach(function (name) {
      if (commandList.indexOf(name) === -1) {
        commandList.push(name);
        program.command(name + ' [...args]')
          .description('')
          .action(function (args) {
            var filename = name + (isWindows ? ".cmd": "");
            debug('Running command', name, args);
            log(utils.runCommand(path.join(binPath, filename), args));
          });
      }
    });
  }

  program.parse(process.argv);
  if (!program.args.length) {
    program.help();
  }
});

exports.program = program;
